generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String    @id @unique
  email                  String    @unique
  username               String?   @db.VarChar(255)
  imageUrl               String?
  oauthId                String?
  oauthProvider          String?
  files                  File[]
  createdAt              DateTime  @default(now())
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map("users")
}

enum UploadStatus {
  PENDING
  FAILED
  SUCCESS
}

model File {
  id        String       @id @default(cuid())
  name      String
  public_id String
  url       String
  status    UploadStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  User      User        @relation(fields: [userId], references: [id])
  messages  Message[]
  userId    String

  @@map("files")
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  File          File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String

  @@map("messages")
}
