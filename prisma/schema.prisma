generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @unique
  email            String        @unique
  username         String        @db.VarChar(255)
  imageUrl         String?
  oauthId          String?
  oauthProvider    String?
  files            File[]
  createdAt        DateTime      @default(now())
  stripeCustomerId String?       @unique @map(name: "stripe_customer_id")
  subscription     Subscription?

  @@map("users")
}

enum UploadStatus {
  PENDING
  FAILED
  SUCCESS
}

model File {
  id        String       @id @default(cuid())
  name      String
  public_id String
  url       String
  status    UploadStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  userId    String

  @@map("files")
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  File          File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String

  @@map("messages")
}

model Subscription {
  id                 String             @id @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String             @unique
  planName           String             @map(name: "plan_name")
  stripePriceId      String             @map(name: "stripe_price_id")
  status             SubscriptionStatus
  currentPeriodStart DateTime           @map(name: "stripe_current_period_start")
  currentPeriodEnd   DateTime           @map(name: "stripe_current_period_end")
  canceledAt         DateTime?          @map(name: "stripe_canceled_at")
  cancelAtPeriodEnd  Boolean            @default(false)
  invoices           Invoice[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
}

model Invoice {
  id              String        @id @default(cuid())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId  String
  stripeInvoiceId String        @unique @map(name: "stripe_invoice_id")
  amountPaid      Int           @map(name: "amount_paid")
  amountDue       Int           @map(name: "amount_due")
  amountRemaining Int           @map(name: "amount_remaining")
  currency        String        @default("usd")
  status          InvoiceStatus
  invoiceUrl      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}
